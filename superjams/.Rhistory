theme(legend.position="right",
axis.title.x = element_blank(),
axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=20),
axis.text.y = element_text(face="bold", color="#993333",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = Tmean), size=1.5) +
scale_color_gradient2(low = "blue", mid= "cyan", high = "red",   midpoint = 23.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
labs(fill = "Tmean (°C)") +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.text.x = element_text(face="bold", color="black",
size=14, angle=20),
axis.text.y = element_text(face="bold", color="black",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = Tmean), size=1.5) +
scale_color_gradient2(low = "blue", mid= "cyan", high = "red",   midpoint = 23.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
labs(fill = "Tmean (°C)") +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.title.x = element_text(face="bold", color="black",
size=14, angle=0),
axis.text.x = element_text(face="bold", color="black",
size=14, angle=20),
axis.text.y = element_text(face="bold", color="black",
size=14, angle=0))
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = Tmean), size=1.5) +
scale_color_gradient2(low = "blue", mid= "cyan", high = "red",   midpoint = 23.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
labs(fill = "Tmean (°C)") +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(face="bold", color="black",
size=14, angle=20),
axis.text.y = element_text(face="bold", color="black",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = Tmean), size=1.5) +
scale_color_gradient2(low = "blue", mid= "cyan", high = "red",   midpoint = 23.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
labs(fill = "Tmean (°C)") +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(color="black",
size=14, angle=20),
axis.text.y = element_text(color="black",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = Tmean), size=1.5) +
scale_color_gradient2(low = "blue", mid= "cyan", high = "red",   midpoint = 23.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
labs(fill = "Tmean (°C)") +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(color="black",
size=14, angle=0),
axis.text.y = element_text(color="black",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = "black"), size=1.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
labs(fill = "Tmean (°C)") +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(color="black",
size=14, angle=0),
axis.text.y = element_text(color="black",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = "black"), size=1.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
theme(legend.position="none",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(color="black",
size=14, angle=0),
axis.text.y = element_text(color="black",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(size=1.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
theme(legend.position="none",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(color="black",
size=14, angle=0),
axis.text.y = element_text(color="black",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = Tmean), size=1.5) +
scale_color_gradient2(low = "blue", mid= "cyan", high = "red",   midpoint = 23.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
# labs(fill = "Tmean (°C)") +
guides(fill=guide_legend("Tmean (°C)")) +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(color="black",
size=14, angle=0),
axis.text.y = element_text(color="black",
size=14, angle=0))
p
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = Tmean), size=1.5) +
scale_color_gradient2(low = "blue", mid= "cyan", high = "red",   midpoint = 23.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
# labs(fill = "Tmean (°C)") +
guides(fill=guide_legend("Tmean (°C) \n")) +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(color="black",
size=14, angle=0),
axis.text.y = element_text(color="black",
size=14, angle=0))
p
bxp.legend <- ggboxplot(legend.title="Tmean (°C)")
p <- ggplot(data4, aes(x=Date, y= (-data4$Dmax))) +
geom_line(aes(color = Tmean), size=1.5) +
scale_color_gradient2(low = "blue", mid= "cyan", high = "red",   midpoint = 23.5) +
ylab("Maximum depth (m)") +
xlab("Date") +
theme_classic() +
labs(fill = "Tmean (°C)") +
theme(legend.position="right",
axis.title.x = element_blank(),
axis.title.y = element_text(face="bold", color="black",
size=14),
axis.text.x = element_text(color="black",
size=14, angle=0),
axis.text.y = element_text(color="black",
size=14, angle=0))
p
killJ2K() # kill jams if it's running
library(gridExtra)
rm(list=ls()); start_time <- Sys.time();
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####### 1. R Settings #######
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# General settings for R
source("Rcoupler[WatASit=J2K]-settings.R")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####### 2. Simulation Settings and inputs #######
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Active cormas N J2K during coupled simu
with_cormas <- T # For doing only warm-up without cormas for water balance tests of J2k
with_J2K <- T # If set to false, only the warming up is performed and
#the same hydrologic day is used for the whole coupled
# simulation
#Some general settings of the simulation
# If water balance is made or not (increases simulation time)
makeWaterBalance <- T; if (makeWaterBalance) { storedWater <- NULL; inOutWater <-NULL ;localStoredWater <- NULL; localInOutWater <-NULL}
# If original big Hrus are used (not hru plot and thus no cormas)
bigHrus <- F
# If orginial big Hrus are used, link must be made between cormas HRU plots and J2K big HRUS
if (bigHrus) {
source("clean-hrus-par.R") # create the plotsInHrus variable telling for each hruPlot in which big hru it is..
}
####### 2.0 Specification of case study name and simulation dates [COMPULSORY] #######
case_study_name <- "Aspres_with_cormas_1989-2013"
date_start_hydro <- as.Date("2016-01-01", "%Y-%m-%d") # Attention la date de début de simulation de j2k doit être la mêne que dans le .jam (date modifiée dans juice!)
date_start_crop <- as.Date("2016-10-15", "%Y-%m-%d"); doy_start_crop <- as.numeric(difftime(date_start_crop,date_start_crop,units='days'))
date_start_irri <- as.Date("2017-05-01", "%Y-%m-%d"); doy_start_irri <- as.numeric(difftime(date_start_irri,date_start_crop,units='days'))
# date_end_irri <- as.Date("2017-09-30", "%Y-%m-%d"); doy_end_irri <- as.numeric(difftime(date_end_irri,date_start_crop,units='days'))
date_end_irri <- as.Date("2017-05-15", "%Y-%m-%d")
doy_end_irri <- as.numeric(difftime(date_end_irri,date_start_crop,units='days'))
date_end_simu <- date_end_irri
####### 2.1 Importation of meteo data input for Optirrig and WatASit [COMPULSORY] #######
climate_file_name <- 'climate_buech_2016-2017.csv'
input_meteo <- computeClimateInput(climate_file_name, date_start_crop, date_end_irri)
str(input_meteo)
####### 2.2 Specification for J2K/JAMS #######
# hydro_warmup_doy_nb <- as.numeric(difftime(date_start_crop, date_start_hydro,units='days')-1)
nbDays <- as.numeric(difftime(date_start_irri,date_start_hydro,units='days'))
#jams_file_name <- "cowat_for_new_com_module.jam"
jams_file_name <- "cowat_for_new_com_module_GB.jam"
if (bigHrus) {
jams_file_name <- "cowat_for_new_com_module_GB-bigHrus.jam"
}
reachTopologyFileName <- "reach_cor2_delete_duplicate.par"
####### 2.3 Specification for WatASit/Cormas coupling [COMPULSORY] #######
modelName = "COWAT"
parcelFile = "WatASit.pcl"
init = "INIT_2017_318x238_upperBuech"
cormas_doy_nb <- as.numeric(difftime(date_end_irri,date_start_irri,units='days'))
#scenario <- "TestConnexion" #Choose Baseline ("simultaneous" scenario) or Alternative ("daily slots" scenario)
scenario <- "BaselineCOWAT"
# ####### 2.4 Specification for Optirrig coupling [COMPULSORY] #######
# Unused here
####### 2.5 Activate results saving #######
saveRes <- F #if False -> don't save results if True -> save results
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####### 3. WatASit and J2K initialisation ############################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####### 3.1 Connexion and opening of WatASit model #######
# Open Cormas: dans le répertoire de cormas taper: "wine cormas.exe"
if (with_cormas) {
cormasInVW7dir = cormasRootPath
setwd(cormasInVW7dir)
if (!isCormasListening()) {
# Open Cormas listenning for instruction
system2(
'wine',
args=c('../bin/win/visual.exe', 'cormas.im' ,'-doit', '"CormasNS.Kernel.Cormas current startWSForR"'),
# adding headless successfully launches cormas and the model loading appears to be working
# but at some point Rcoupler crashes
#args=c('../bin/win/visual.exe', 'cormas.im', '-headless' ,'-doit', '"CormasNS.Kernel.Cormas current startWSForR"'),
wait=F, stdout=stdoutP, stderr=stderrP
)
cat('\n\nWaiting 3 seconds to make sure cormas starts listening...')
Sys.sleep(3)
}
setwd(wd)
# Ça ouvre une image de cormas avec le modèle chargé mais ne pas regarder
# Dans l'interface principale, aller dans le menu: "simulation/Analysis/cormas<-->R/Sart webservie for R".
# Un petit logo R avec un point vert doit apparaitre.. Le tour est joué.
r <- openModel(modelName, parcelFile = parcelFile)
####### 3.2 Choose of WatASit initial state and time step function (scenarios) #######
# Note that the model is not initialized, we just set the init method..
r <- setInit(init) # Init
r <- setStep(paste0("R_go",scenario,"Step:")) # Stepper
####### 3.4 Initialize Cormas model #######
#Choose probes to activate
r <- activateProbe("flowInRiverReachGB", "COWAT")
r <- activateProbe("flowInRiverReachPB", "COWAT")
r <- activateProbe("numberOfFlooldPlotActions", "COWAT")
r <- activateProbe("numberOfFloodPlots", "COWAT")
#r <- activateProbe("irriDailyDoseProbe", "FarmPlot")
# initialize the model
r <- initSimu()
####### 3.5 Get Hrus and reaches IDs that are in WatAsit Model #######
cormasParcelIds <- getAttributesOfEntities("idParcel","FarmPlot") %>%
tbl_df()
cormasSpatialPlaceIds <- getAttributesOfEntities("idReach","SpatialPlace") %>%
tbl_df()
correctReachIds <- read.table("superjams/data/J2K_cowat/parameter/step2_streams_new_div_OK2.asc",
sep = " ",
dec = ".",
skip = 6) %>%
mutate(line = row_number()) %>%
gather("col", "j2kID", -line) %>%
mutate(col = as.numeric(str_remove(col,"V"))) %>%
arrange(line, col) %>%
mutate(cormasId = row_number() - 1) %>% #JE NE SAIS PAS POURQUOI il y a un décalage de 1..!
filter(j2kID != 0) %>%
tbl_df() %>%
full_join(cormasSpatialPlaceIds %>%
mutate(cormasId = as.numeric(as.character(id)))) %>%
arrange(cormasId) %>%
mutate(j2kID = replace_na(j2kID,0))
r <- setAttributesOfEntities("idReach",
"SpatialPlace",
correctReachIds$cormasId,
correctReachIds$j2kID)
cormasReachIds <- getAttributesOfEntities("idReach","RiverReach") %>%
tbl_df()
spatialPlacesWithCanals <- getAttributesOfEntities("canalsId","SpatialPlace") %>%
tbl_df() %>%
filter(canalsId > 0)
spatialPlacesWithCanals <- spatialPlacesWithCanals %>%
left_join(getAttributesOfEntities("idHRU","SpatialPlace"), by = "id") %>%
mutate(id = as.numeric(as.character(id))) %>%
arrange(id)
}
####### 3.5 Initialize J2K model #######
# On laisse le coupleur lancer JAMS/J2K
killJ2K() # kill jams if it's running
setwd(jamsRootPath)
system2(
'java',
args=c('-jar', 'jams-starter.jar', '-m', paste0('data/J2K_cowat/',jams_file_name), '-n'),
wait=F, stdout=stdoutP, stderr=stderrP
)
cat('\n\nWaiting 5 seconds to make sure J2K coupling module starts listening...')
Sys.sleep(5)
setwd(wd)
####### 3.6 Warms-up J2K model #######
# Run j2k on the warming-up simulation period
simuProgress <- txtProgressBar(min = 1,
max = nbDays,
style = 3)
# J2k Warming-up
print("J2k warming-up")
for (i in 1:nbDays){
#cat("\n","Running step:",i,"\n");
setTxtProgressBar(simuProgress, i)
# Run step-by-step for balance purpose
if (makeWaterBalance) {
storedWater <- rbind(storedWater, j2kWaterBalanceStorages())
# Testing local balance. Only during warming-up.
if (bigHrus) {
localStoredWater <- rbind(localStoredWater, j2kLocalWaterBalanceStorages(selectedHrus = c(16637)))
} else {
localStoredWater <- rbind(localStoredWater, j2kLocalWaterBalanceStorages(selectedHrus = c(8560,16637,8563,11104,12464)))
}
}
# Making step by step j2k simu
Sys.sleep(0.05)
j2kMakeStep()
Sys.sleep(0.05)
if (makeWaterBalance) {
inOutWater <- rbind(inOutWater, j2kWaterBalanceFlows())
# Testing local balance. Only during warming-up.
if (bigHrus) {
localInOutWater <- rbind(localInOutWater, j2kLocalWaterBalanceFlows(selectedHrus = c(16637),
lastHru = 16637))
} else {
localInOutWater <- rbind(localInOutWater, j2kLocalWaterBalanceFlows(selectedHrus = c(8560,16637,8563,11104,12464),
lastHru = 16637))
}
}
}
setwd("/home/bastien/Documents/COWAT-ALL/superjams/data/J2K_cowat/parameter/")
hrus <- read.csv(file = "hru_cor.par", sep = "\t", dec=".", skip = 4)
head(hrus)
colnames(hrus) <- c("ID", "area", "elevation", "slope", "aspect", "x", "y", "watershed", "subbasin", "hgeoID", "landuseID", "soilID", "to_poly", "to_reach")
head(hrus)
which(hrus$area)<10
which(hrus$area<10)
rm(list=ls()); start_time <- Sys.time();
source("Rcoupler[WatASit=J2K]-settings.R")
getwd()
setwd("/home/bastien/Documents/2017-2020_These_GEAU/Work_COPAT/Optirrig/WatASit/WatASit_Rcoupler")
source("Rcoupler[WatASit=J2K]-settings.R")
date_start <- as.Date("2016-01-01", "%Y-%m-%d")
date_end <- as.Date("2017-09-30", "%Y-%m-%d")
climate_file_name <- 'climate_buech_2016-2017.csv'
input_meteo <- computeClimateInput(climate_file_name, date_start_crop, date_end_irri)
input_meteo <- computeClimateInput(climate_file_name, date_start, date_end)
head(input_meteo)
jams_file_name <- "cowat_for_new_com_module-bigHrus.jam"
killJ2K() # kill jams if it's running
setwd(jamsRootPath)
system2(
'java',
args=c('-jar', 'jams-starter.jar', '-m', paste0('data/J2K_cowat/',jams_file_name), '-n'),
wait=F, stdout=stdoutP, stderr=stderrP
)
cat('\n\nWaiting 5 seconds to make sure J2K coupling module starts listening...')
Sys.sleep(5)
setwd(wd)
# Run j2k on the simulation period
nbDays <- as.numeric(difftime(date_start,date_end,units='days'))
nbDays
date_start
date_end
nbDays <- as.numeric(difftime(date_end,date_start,units='days'))
nbDays
simuProgress <- txtProgressBar(min = 1,
max = nbDays,
style = 3)
print("J2k simulation")
for (i in 1:nbDays){
setTxtProgressBar(simuProgress, i)
j2kMakeStep()
}
source('~/Documents/COWAT-ALL/superjams/data/J2K_cowat/parameter/airJ2K_eval.R')
rm(list=ls()); start_time <- Sys.time();
source("Rcoupler[WatASit=J2K]-settings.R")
# Simulation Settings
date_start <- as.Date("2016-01-01", "%Y-%m-%d")
date_end <- as.Date("2017-09-30", "%Y-%m-%d")
# if (bigHrus) {# If orginial big Hrus are used, link must be made between cormas HRU plots and J2K big HRUS
#   source("clean-hrus-par.R") # create the plotsInHrus variable telling for each hruPlot in which big hru it is..
# }
climate_file_name <- 'climate_buech_2016-2017.csv'
input_meteo <- computeClimateInput(climate_file_name, date_start, date_end)
head(input_meteo)
jams_file_name <- "cowat_for_new_com_module-bigHrus.jam"
getwd()
killJ2K() # kill jams if it's running
setwd(jamsRootPath)
system2(
'java',
args=c('-jar', 'jams-starter.jar', '-m', paste0('data/J2K_cowat/',jams_file_name), '-n'),
wait=F, stdout=stdoutP, stderr=stderrP
)
cat('\n\nWaiting 5 seconds to make sure J2K coupling module starts listening...')
Sys.sleep(5)
setwd(wd)
j2kMakeStep()
rm(list=ls()); start_time <- Sys.time();
source("Rcoupler[WatASit=J2K]-settings.R")
# Simulation Settings
date_start <- as.Date("2016-01-01", "%Y-%m-%d")
date_end <- as.Date("2017-09-30", "%Y-%m-%d")
climate_file_name <- 'climate_buech_2016-2017.csv'
input_meteo <- computeClimateInput(climate_file_name, date_start, date_end)
head(input_meteo)
jams_file_name <- "cowat_for_new_com_module-bigHrus.jam"
killJ2K() # kill jams if it's running
jamsRootPath
setwd(jamsRootPath)
system2(
'java',
args=c('-jar', 'jams-starter.jar', '-m', paste0('data/J2K_cowat/',jams_file_name), '-n'),
wait=F, stdout=stdoutP, stderr=stderrP
)
cat('\n\nWaiting 5 seconds to make sure J2K coupling module starts listening...')
Sys.sleep(5)
setwd(wd)
wd
setwd(jamsRootPath)
jamsRootPath
getwd()
setwd("/home/bastien/Documents/watasitrcoupler")
rm(list=ls()); start_time <- Sys.time();
source("Rcoupler[WatASit=J2K]-settings.R")
rm(list=ls()); start_time <- Sys.time();
source("Rcoupler[WatASit=J2K]-settings.R")
getwd()
date_start <- as.Date("2016-01-01", "%Y-%m-%d")
date_end <- as.Date("2017-09-30", "%Y-%m-%d")
climate_file_name <- 'climate_buech_2016-2017.csv'
input_meteo <- computeClimateInput(climate_file_name, date_start, date_end)
head(input_meteo)
jams_file_name <- "cowat_for_new_com_module-bigHrus.jam"
getwd()
killJ2K() # kill jams if it's running
jamsRootPath
setwd(jamsRootPath)
system2(
'java',
args=c('-jar', 'jams-starter.jar', '-m', paste0('data/J2K_cowat/',jams_file_name), '-n'),
wait=F, stdout=stdoutP, stderr=stderrP
)
cat('\n\nWaiting 5 seconds to make sure J2K coupling module starts listening...')
Sys.sleep(5)
setwd(wd)
wd
nbDays <- as.numeric(difftime(date_end,date_start,units='days'))
simuProgress <- txtProgressBar(min = 1,
max = nbDays,
style = 3)
print("J2k simulation")
for (i in 1:nbDays){
setTxtProgressBar(simuProgress, i)
j2kMakeStep()
}
wd
wd<-"/home/bastien/Documents/watasitrcoupler"
setwd(wd)
rm(list=ls()); start_time <- Sys.time();
wd<-"/home/bastien/Documents/watasitrcoupler" ; setwd(wd)
source("Rcoupler[WatASit=J2K]-settings.R")
date_start <- as.Date("2016-01-01", "%Y-%m-%d")
date_end <- as.Date("2017-09-30", "%Y-%m-%d")
climate_file_name <- 'climate_buech_2016-2017.csv'
input_meteo <- computeClimateInput(climate_file_name, date_start, date_end)
head(input_meteo)
jams_file_name <- "cowat_for_new_com_module-bigHrus.jam"
killJ2K() # kill jams if it's running
jamsRootPath
setwd(jamsRootPath)
system2(
'java',
args=c('-jar', 'jams-starter.jar', '-m', paste0('data/J2K_cowat/',jams_file_name), '-n'),
wait=F, stdout=stdoutP, stderr=stderrP
)
cat('\n\nWaiting 5 seconds to make sure J2K coupling module starts listening...')
Sys.sleep(5)
j2kMakeStep()
rm(list=ls()); start_time <- Sys.time();
rm(list=ls()); start_time <- Sys.time();
wd<-"~/watasitrcoupler" ; setwd(wd)
wd
getwd()
